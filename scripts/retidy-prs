#!/usr/bin/env bash

set -euo pipefail

# Script: retidy-prs
# Purpose: Run retidy-pr on all pull requests with failed tests
# Usage: retidy-prs

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_section() {
    echo -e "${CYAN}[SECTION]${NC} $1"
}

# Show help if requested
if [[ $# -eq 1 ]] && [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "retidy-prs - Run retidy-pr on all pull requests with failed tests"
    echo
    echo "Usage: $0"
    echo
    echo "Description:"
    echo "  This script uses the GitHub CLI to find all open pull requests"
    echo "  that have failing test status checks, then runs the retidy-pr"
    echo "  script on each of those branches to synchronize go.mod files."
    echo
    echo "Requirements:"
    echo "  - GitHub CLI (gh) must be installed and authenticated"
    echo "  - Must be run from the project root directory"
    echo "  - retidy-pr script must be present in scripts/ directory"
    echo
    echo "Examples:"
    echo "  $0                    # Process all PRs with failed tests"
    echo "  $0 --help            # Show this help"
    exit 0
fi

# Validate no arguments
if [[ $# -ne 0 ]]; then
    log_error "This script takes no arguments"
    log_error "Use $0 --help for more information"
    exit 1
fi

log_section "Starting retidy-prs - Processing PRs with failed tests"

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    log_error "Not in a git repository"
    exit 1
fi

# Check if gh CLI is available
if ! command -v gh >/dev/null 2>&1; then
    log_error "GitHub CLI (gh) is not installed or not in PATH"
    log_error "Install it from: https://cli.github.com/"
    exit 1
fi

# Check if retidy-pr script exists
SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
RETIDY_PR_SCRIPT="$SCRIPT_DIR/retidy-pr"

if [[ ! -f "$RETIDY_PR_SCRIPT" ]]; then
    log_error "retidy-pr script not found at: $RETIDY_PR_SCRIPT"
    exit 1
fi

if [[ ! -x "$RETIDY_PR_SCRIPT" ]]; then
    log_error "retidy-pr script is not executable: $RETIDY_PR_SCRIPT"
    exit 1
fi

# Check if gh is authenticated
if ! gh auth status >/dev/null 2>&1; then
    log_error "GitHub CLI is not authenticated"
    log_error "Run 'gh auth login' to authenticate"
    exit 1
fi

log_info "Fetching open pull requests..."

# Get all open pull requests with their status checks
# We'll look for PRs where the status checks include failures
FAILED_PRS=()

# Get PRs with JSON output including status checks
log_info "Checking status of open pull requests..."

# Get all open PRs with basic info
PRS_JSON=$(gh pr list --state open --json number,headRefName,title,author --limit 100)

if [[ "$PRS_JSON" == "[]" ]]; then
    log_info "No open pull requests found"
    exit 0
fi

# Parse PR list and check status of each
echo "$PRS_JSON" | jq -r '.[] | "\(.number)|\(.headRefName)|\(.title)|\(.author.login)"' | while IFS='|' read -r pr_number branch_name title author; do
    log_info "Checking PR #$pr_number: $title (by $author)"

    # Get status checks for this PR
    # We'll check for failed status checks related to tests
    STATUS_CHECKS=$(gh pr checks "$pr_number" --json name,status,conclusion 2>/dev/null || echo "[]")

    # Check if there are any failed test-related status checks
    FAILED_TESTS=$(echo "$STATUS_CHECKS" | jq -r '.[] | select(.conclusion == "failure" or .conclusion == "cancelled" or .conclusion == "timed_out") | select(.name | test("test|Test|lint|Lint|ci|CI")) | .name' 2>/dev/null || true)

    if [[ -n "$FAILED_TESTS" ]]; then
        echo "$pr_number|$branch_name" >> /tmp/failed_prs.txt
        log_warning "PR #$pr_number ($branch_name) has failed tests:"
        echo "$FAILED_TESTS" | while read -r failed_check; do
            echo "  - $failed_check"
        done
    else
        log_info "PR #$pr_number ($branch_name) has no failed tests"
    fi
done

# Read the failed PRs from temp file
if [[ -f /tmp/failed_prs.txt ]]; then
    while IFS='|' read -r pr_number branch_name; do
        FAILED_PRS+=("$pr_number|$branch_name")
    done < /tmp/failed_prs.txt
    rm -f /tmp/failed_prs.txt
fi

if [[ ${#FAILED_PRS[@]} -eq 0 ]]; then
    log_success "No pull requests with failed tests found!"
    log_info "All open PRs appear to have passing tests"
    exit 0
fi

log_section "Found ${#FAILED_PRS[@]} pull request(s) with failed tests"

# Process each failed PR
SUCCESS_COUNT=0
FAILURE_COUNT=0
SKIPPED_COUNT=0

for pr_info in "${FAILED_PRS[@]}"; do
    IFS='|' read -r pr_number branch_name <<< "$pr_info"

    log_section "Processing PR #$pr_number: $branch_name"

    # Check if this might be a Dependabot PR (common case for go mod tidy issues)
    if [[ "$branch_name" =~ ^dependabot/ ]]; then
        log_info "Detected Dependabot PR - likely needs go mod tidy"
    fi

    # Run retidy-pr on this branch
    log_info "Running retidy-pr on branch: $branch_name"

    if "$RETIDY_PR_SCRIPT" "$branch_name"; then
        log_success "Successfully processed PR #$pr_number ($branch_name)"
        ((SUCCESS_COUNT++))
    else
        log_error "Failed to process PR #$pr_number ($branch_name)"
        ((FAILURE_COUNT++))
    fi

    # Add a small delay between PRs to avoid overwhelming GitHub API
    sleep 2
done

# Summary
log_section "Processing Summary"
log_info "Total PRs processed: ${#FAILED_PRS[@]}"
log_success "Successful: $SUCCESS_COUNT"
if [[ $FAILURE_COUNT -gt 0 ]]; then
    log_error "Failed: $FAILURE_COUNT"
fi
if [[ $SKIPPED_COUNT -gt 0 ]]; then
    log_warning "Skipped: $SKIPPED_COUNT"
fi

if [[ $FAILURE_COUNT -gt 0 ]]; then
    log_warning "Some PRs failed to process. Check the output above for details."
    exit 1
else
    log_success "All PRs with failed tests have been processed!"
fi